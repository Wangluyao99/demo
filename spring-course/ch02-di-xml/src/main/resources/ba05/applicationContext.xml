<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!--
    引用类型的自动注入: spring框架根据某些规则可以给 引用类型赋值。，不用你在给引用类型赋值了
    使用的规则常用的是byName, byType.
        1. byName(按名称注入) : java类 中引用类型的属性名和spring容器中(配置文件) <bean>的id名称一样，
                         且数据类型是一致的，这样的容器中的bean，spring能够赋值给引用类型。
         语法:
             <bean id="xx" class="yyy" autowire= "byName">
                 简单类型属性赋值
             </bean>
         2. byType(按类型注入) : java类 中引用类型的数据类型和spring容器中(配置文件) <bean>的class属性
                                是同源关系的,这样的bean能够赋值给引用类型
                同源就是一类的意思;
                    1.java类中引用类型的数据类型和bean的class的值是一样的。
                    2. java类中引用类型的数据类型和bean的class的值父子类关系的。
                    3. java类 中引用类型的数据类型和bean的class的值接 口和实现类关系的
           语法:
             <bean id="xx" class="yyy" autowire= "byType">
                 简单类型属性赋值
             </bean>
    -->


    <!--使用byType属性实现注入-->
    <!--声明Student对象-->
    <bean id="myStudent" class="org.example.ba05.Student" autowire="byType">
        <!--简单类型赋值-->
        <property name="name" value="李四"/>
        <property name="age" value="23"/>

        <!--引用类型赋值-->
       <!-- <property name="school" ref="mySchool"/>-->
    </bean>

    <!--声明School对象-->
    <!--<bean id="mySchool" class="org.example.ba05.School">
        <property name="name" value="北京大学"/>
        <property name="address" value="北京海淀区"/>
    </bean>-->

    <!--声明子类对象-->
    <bean name="PrimarySchool" class="org.example.ba05.PrimarySchool">
        <property name="name" value="北京小学"/>
        <property name="address" value="北京大兴区"/>
    </bean>
<!--以上两个选一个，不能同时-->

</beans>