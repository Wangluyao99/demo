<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--把数据库的配置信息写在独立文件中，便于修改配置内容
        spring知道properties文件位置的标签-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--声明数据源DataSource，作用是连接数据库-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--set注入，给DruidDataSource提供连接数据库的信息-->
        <!--使用属性配置文件，语法：${key}-->
        <property name="url" value="${jdbc.url}"/><!--setUrl()-->
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.passwd}"/>
        <property name="maxActive" value="${jdbc.max}"/>
    </bean>


    <!--声明的是mybatis中提供的SqlSessionFactoryBean类，该类内部创建SqlSessionFactory的-->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <!--mybatis主配置文件的位置 用configLocation,读取配置文件-->
        <property name="configLocation" value="classpath:mybatis.xml"/><!--在spring配置文件中指定其他文件路径用classpath-->
    </bean>


    <!--创建dao对象，使用SqlSession的getMapper(StudentDao.class)
        MapperScannerConfigurer:内部调用getMapper()，生成每个dao接口的代理对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>
        <!--指定包名，dao所在包名
            MapperScannerConfigurer会扫描这个包中所有接口，每个接口都执行一遍getMapper()，得到接口的dao。
            创建好的dao对象放入到spring容器中，dao对象的默认名称是接口名称首字母小写。-->
        <property name="basePackage" value="org.example.dao"/>
    </bean>

    <!--声明service-->
    <bean id="buyService" class="org.example.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <property name="saleDao" ref="saleDao"/>
    </bean>

    <!--1、声明式事务处理，和源码完全分离-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--2、声明事务方法的事务属性
            id 自定义属性，表示配置的内容
            transaction-manager 事务管理器对象的id
    -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <!--tx:attributes表示配置的事务属性
            tx:method给具体方法配置事务属性，可有多个
                name方法名称，不带有包名类名，可用通配符*，表示一类方法
                propagation 传播行为
                isolation 隔离级别
                rollback-for 指定的异常类名，全限定名称，方式异常回滚
        -->
        <tx:attributes>
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException,org.example.exception.NotEnoughException"/>
        </tx:attributes>
    </tx:advice>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式，指定哪些包中的类用到事务
            id：切入点表达式名称
            expression:切入点表达式，指定哪些类使用事务，aspectj会创建代理对象
            (* *..service..*.*(..)) :所有service包和子包中的所有类的所有方法
        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置增强器：类和方法关联，关联advice和pointcut-->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>
</beans>