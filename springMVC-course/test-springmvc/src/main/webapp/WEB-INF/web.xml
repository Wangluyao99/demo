<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!---声明，注册springmvc的核心对象DispatcherServlet
        需要在tomcat服务器启动后，创建Di spatcherServlet对象的实例。
        为什么要创建DispatcherServlet对象的实例呢?
        因为Di spatcherServlet在他的创建过程中，会 同时创建springmvc容器对象，
        读取springmvc的配置文件， 把这个配置文件中的对象都创建好，当用户发起
        请求时就可以直接使用对象了。

        servlet的初始化会执行init ( )方法。DispatcherServlet在init ( )中{
            //创建容器，读取配置文件|
            WebApplicationContext ctx . new ClassPathXmlApplicat ionContext(" springmvc . xml");
            //把容器对象放入到ServletContext中
            getServletContext().setAttribute(key,ctx);

            启动Tomcat报错，读取这个文件、/WEB-INF/springmvc-servlet.xml
            所以<servlet-name>springmvc</servlet-name> 中间不能使用springmvc
    -->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--自定义springmvc读取配置文件的位置-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--tomcat启动后就创建对象
            load-on-startup: tomcat启动后创建对象的顺序，值是整数，越小的话Tomcat创建的时间越早，>=0, 0很少用
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>myweb</servlet-name>

        <!--使用框架的时候，url-pattern可以使用两种值
            1.使用扩展名方式，语法.XXxx , xxxx是自定义的扩展名。 常用的方式*.do, *.action, * .mvc等等
            http:// localhost ; 8080/ myweb/ some.do
            http://localhost : 8080/myweb/other.do
            .do结尾的方法都交给myweb处理
            2.使用斜杠"/”-->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>